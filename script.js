// JavaScript для верстальщика

// =========================================================================
// Тип данных number (число).

//  Переменная
// let num = 10;
// console.log(num);

// num = 20;
// console.log(typeof num);
// console.log(num);

// Тип данных 'string' (строка)
//  Для трок используются одинарные и двойные кавычки ('', "")
// 'string'
// "string"
// Так же используются обратные кавычки (``)
// В обратных кавычках можно использовать значения переменных ${let}

/*
let num = 39;

let someString = `Мне ${num} лет.`;
console.log(someString); // Вернет результат " Мне 39 лет ".
*/

// let str = "10";
// console.log(typeof str);
// console.log(str);

// Константа
// const num = 25;
// console.log(typeof num);
// console.log(num);

// Тип данных Object (обьект).
/*
const user = {
    name: "Dmitriy",
    age: 39,
};
// Посмотреть тип данных
console.log(typeof user);
// Поменять значение  ключа name и присвоить ему новое значение.
// Присвоить можно любой тип данных
user.name = "Diman";
user.age = "money"; //был тип данных число, стал "строка".
// В объект можно присвоить новый объект
user.friends = {
    "first friend": "Michael", // Если ключ состоит из двух и более слов, то его заключают в кавычки ( "" ).
    "last friend": "Alex",
};
// Посмотреть что содержит объект
console.log(user);

// Получить доступ к вложенному объекту и изменить значение ключа состоящее из двух и более слов
user.friends["last friend"] = "Irina";
// Посмотреть что содержит ключ в объекте
console.log(user.friends);

// Посмотреть что содержит ключ во вложенном объекте
console.log(user.friends["first friend"]);
console.log(user.friends["last friend"]);
*/

// Математические Операторы

// сложение (+)
// Вычитание (-)
// Деление(/)
//Умножение(*)

// Оператор сложения может складывать числа, строки, числа и строки
// 100 + 50 вернет 150 (число)
// 100 + "50" вернет "10050" (строка)
// 100 + "Привет" вернет "100Привет" (строка)

// Преобразование типов данных
// Преобразование в число Number() или "+"
// Преобразование в строку string()

// let age = "39"; // Тип данных строка

// console.log(typeof age);
// console.log(age);
// console.log(Number(age)); // Тип данных число

// let age2 = 40;
// console.log(typeof age2);
// console.log(age2);
// сложение значений переменных с преобразованием в число
// let num = +age + age2; // вариант №1
// let num = Number(age) + age2; // вариант №2

// console.log(typeof num);
// console.log(num);

// Если пытаться преобразовать в число строку состоящую из букв (например "Привет"),
// то результатом будет NaN - Это означает (не число) или операция не может быть выполнена.
// Потому что нельзя преобразовать в число строку состоящую из букв.

// console.log(Number("Привет")); // результат NaN.

// Все поераторы "- / *" кроме оператора "+", будут переводить строку в число автоматически.
// но если в строке будут буквы, то результаттом тоже будет NaN.

// Конкатинация строк
// С помощьюпоератора "+" можно складывать переменные содержащие строки и числа в предложения
// let hello = "Привет",
//     world = " Мир",
//     im = " Я",
//     happy = " Счастлив ",
//     num = 24;

// let result = hello + world + im + happy + num;
// console.log(result); // Результат "Привет Мир Я Счастлив 24"

// Операторы сравнения
// Все операторы сравнения возвращают Булевый (Boolean) тип данных
// Значения
// true - истина
// false - ложь

// Оператор отрицания "!" меняет значение на обратное true на false и на оборот.

// Больше, больше или равно >, >=
// Меньше, меньше или равно  <, <=
// Не строгое равенство == Не делает сравнение по типу данных
// Строгое равенство === Делает сравнение по типу данных
// Не строгое не равенство !=
// Строгое не равенство !==

// Примеры

// let num1 = 10,
//     num2 = 20;
// console.log(num1);
// let result = num1 !== num2;
// console.log(result);

// Условные ветвления

// Операторы if(){}, else{}

// let num1 = 10;
// let num2 = 30;
// if (num1 < num2) {
//     // если условие выполнено (вернуло "true"), выполняем программу
//     console.log("Yes");
// } else {
//     console.log("No");
// }
// if (num1 > num2) {
//     // если условие выполнено (вернуло "true"), выполняем программу
//     console.log("Yes");
// } else if (num2 === 30) {
//     console.log("Yes = 30");
// } else {
//     console.log("No");
// }

/*
// проверка на наличие объекта

const page = document.querySelector(".page");

//проверяем существует ли объект.

if (page) {
    // Если существует, то выполняем код. Если не существует, не выполняем.
    console.log(page);
}
*/
/*
// проверка на наличие коллекции
const listItem = document.querySelectorAll(".list__item");

if (listItem.length) {
    // Если существует, то выполняем код. Если не существует, не выполняем.
    console.log(listItem);
}
*/

// Логические поераторы ||(или) &&(и) !(не, оператор отрицания).
// let numOne = 50,
//     numTwo = 30;
/*
// Если numOne больше numTwo или numOne равно 50.
if (numOne > numTwo || numOne === 50) {
    // Если хоть одно из значений вернет true, выполняем код.
    // выполняем код
    console.log("выполняем код");
}
*/

// Если numOne больше numTwo и numOne равно 50.
// if (numOne > numTwo && numOne === 50) {
//     // Если хоть одно из значений вернет false, не выполняем код.
//     // выполняем код
//     console.log("выполняем код");
// }

/*
// contains('.class') Проверяет наличие или отсутствие класса у блока или элемента
// classList получить доступ к атрибуту класс у блока.

// Находим блок
const blockElement = document.querySelector(".block");
// Проверяем: Если блок не содержит класс active, то добавляем.
if (!blockElement.classList.contains("active")) {
    blockElement.classList.add("active"); // когда пишем classList, точку не ставим!!!
}
*/

//Область видимости переменных
//Облавть видимости работает по принципу "Снаружи внутрь". С наружи внутрь видим переменную, из нутри наружу нет.
/*
let someNum = 10; //Видна на глобальном уровне
if (10 > 5) {
    let someNum = 20;
    console.log(someNum);
}
//  Переменная объявленная глобально и переменная объявленная внутри фигурных скобок (например внутри условного ветвления или фнутри функции),
// Это разные переменные, даже если у них одинаковые нахвания.
//
console.log(someNum);
*/
/*
// если нужно объявить переменную снаружи, а использовать внутри, то можно делать так.
let someNum;
if (10 > 5) {
    someNum = 20;
    console.log(someNum);
}
*/

//  Функции
/*
// Создание функции
function setConsole(someData) {
    // переменная someData объявлена внутри функции
    // Выполняемый код
    console.log(someData);
}
//  Вызов функции
setConsole("привет"); // передаем значение в переменную someData
*/
// return возвращает результат выполнения функции.
/*
function getSum(numOne, numTwo) {
    return numOne + numTwo; //выполнится сложение значений переменных.
}
// Вызов функции и передача переметров в переменные.
getSum(5, 6);
console.log(getSum(5, 6));
// Вызов функции можно назначить в переменную и потом уже ее вызвать.

let result = getSum(5, 6);
console.log(result);
*/

/*
// переменным в функции можно задавать значение по умолчанию
function getSum(numOne, numTwo = 10) {
    return numOne + numTwo; //выполнится сложение значений переменных.
}
// Вызов функции и передача переметров в переменные.
// если параметр не будет передан, то будет использовано значение по умолчанию.
getSum(5);
let result = getSum(5);
console.log(result);
*/
